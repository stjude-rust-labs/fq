#!/usr/bin/env python3
"""FastQ linting utility"""

import sys
import logging
import argparse
from fqlib.fastq import PairedFastQFiles
from fqlib.error import SingleReadValidationError, PairedReadValidationError
from fqlib.timer import Timer

EXIT_SINGLE_READ_VALIDATION_ERROR = 1
EXIT_PAIRED_READ_VALIDATION_ERROR = 2

if __name__ == '__main__':

    # pylint: disable=C0103
    parser = argparse.ArgumentParser(
        description="Lint Illumina generated, paired FastQ files."
    )
    parser.add_argument(
        "read_one_file", help="FastQ file containing all R1 reads."
    )
    parser.add_argument(
        "read_two_file", help="FastQ file containing all R2 reads."
    )
    parser.add_argument(
        "--lint-mode",
        help="Choose how to handle any errors that are linted in the file.",
        choices=["report", "error"],
        default="error"
    )
    parser.add_argument(
        "-s",
        "--single-read-validation-level",
        help="Validation level for single read errors.",
        choices=["minimum", "low", "high"],
        default="high"
    )
    parser.add_argument(
        "-p",
        "--paired-read-validation-level",
        help="Validation level for paired read errors.",
        choices=["minimum", "low", "high"],
        default="high"
    )
    parser.add_argument(
        "--stop-after-n-reads",
        type=int,
        default=-1,
        help="Stop after processing `n` reads. If n < 0, no limit is set."
    )
    parser.add_argument(
        "--print-every-n-reads",
        type=int,
        default=1000000,
        help="Alter how frequently updates are printed to the screen."
    )
    parser.add_argument(
        "-q",
        "--quiet",
        help="Do not output informational messages.",
        action="store_const",
        dest="loglevel",
        const=logging.WARNING,
        default=logging.DEBUG
    )

    args = parser.parse_args()
    logging.basicConfig(
        format="%(levelname)-5s: %(message)s", level=args.loglevel
    )

    pair = PairedFastQFiles(
        args.read_one_file,
        args.read_two_file,
        lint_mode=args.lint_mode,
        single_read_validation_level=args.single_read_validation_level,
        paired_read_validation_level=args.paired_read_validation_level
    )

    (srvalidators, prvalidators) = pair.get_validators()
    logging.info(f"Single Read Validators: {len(srvalidators)}")
    for (code, name) in srvalidators:
        logging.debug(f"  - {code} => {name}")
    logging.info(f"Paired Read Validators: {len(prvalidators)}")
    for (code, name) in prvalidators:
        logging.debug(f"  - {code} => {name}")

    try:
        logging.info("Started reading from files...")
        readno = 0
        with Timer() as t:
            for readno, (read_r1, read_r2) in enumerate(pair, 1):
                if readno % args.print_every_n_reads == 0:
                    t.update(args.print_every_n_reads)

                if args.stop_after_n_reads > 0 and args.stop_after_n_reads <= readno:
                    break

        logging.info("Finished. Processed {:d} reads.".format(readno))  # pylint: disable=W0631
    except SingleReadValidationError as e:
        for line in str(e).split("\n"):
            logging.error(line)
        sys.exit(EXIT_SINGLE_READ_VALIDATION_ERROR)
    except PairedReadValidationError as e:
        for line in str(e).split("\n"):
            logging.error(line)
        sys.exit(EXIT_PAIRED_READ_VALIDATION_ERROR)